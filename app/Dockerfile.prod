###########
# BUILDER #
###########

# pull official base image
FROM python:3.9.6-alpine as builder

# set work directory
WORKDIR /usr/src/app

# set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

USER root

# Install build dependencies
RUN apk add --no-cache build-base libffi-dev

# install psycopg2 and pillow dependencies
RUN apk update \
    && apk add postgresql-libs postgresql-dev libffi-dev \
       openldap-dev unixodbc-dev gcc musl-dev python3-dev \
       jpeg-dev zlib-dev libjpeg g++ freetype-dev cairo cairo-dev

# lint
RUN pip install --upgrade pip
RUN pip install flake8==3.9.2
COPY . .
# RUN flake8 --ignore=E501,W291,E211,F841,E128,F403,E203,E741,E999,E302,F405,F811,F401,E225,E122 .

# collect static files
RUN python manage.py collectstatic --noinput

# install dependencies
RUN apk add -u zlib-dev jpeg-dev gcc musl-dev
RUN apk add libressl-dev
RUN python3 -m pip install --upgrade pip
COPY ./requirements.txt .
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/app/wheels -r requirements.txt
RUN pip install --no-build-isolation pycairo
RUN pip install -r requirements.txt

RUN apk add --update --no-cache --virtual .tmp-build-deps \
    gcc libc-dev linux-headers postgresql-dev \
    && apk add libffi-dev openssl-dev


#########
# FINAL #
#########

# pull official base image
FROM python:3.9.6-alpine

# create directory for the app user
RUN mkdir -p /home/app

# create the app user
RUN addgroup -S app && adduser -S app -G app

# create the appropriate directories
ENV HOME=/home/app
ENV APP_HOME=/home/app/web
RUN mkdir $APP_HOME
RUN mkdir $APP_HOME/staticfiles
RUN mkdir $APP_HOME/mediafiles
WORKDIR $APP_HOME

RUN apk add --no-cache --virtual .pynacl_deps build-base python3-dev libffi-dev

RUN apk add --update --no-cache --virtual .tmp-build-deps \
    gcc libc-dev linux-headers postgresql-dev \
    && apk add libffi-dev 

# install dependencies
RUN apk update && apk add libpq
COPY --from=builder /usr/src/app/wheels /wheels
COPY --from=builder /usr/src/app/requirements.txt .
RUN pip install --no-cache /wheels/*

# install pillow dependencies
RUN apk add --no-cache jpeg-dev zlib-dev \
    fribidi-dev \
    harfbuzz-dev \
    lcms2-dev \
    openjpeg-dev \
    tcl-dev \
    tiff-dev \
    tk-dev 



# copy entrypoint.prod.sh
COPY ./entrypoint.prod.sh $APP_HOME
RUN sed -i 's/\r$//g'  $APP_HOME/entrypoint.prod.sh
RUN chmod +x  $APP_HOME/entrypoint.prod.sh

# copy project
COPY . $APP_HOME

# chown all the files to the app user
RUN chown -R app:app $APP_HOME

RUN chown -R app:app /usr/local/lib/python3.9/site-packages/rest_framework_simplejwt/

RUN chown -R app:app mediafiles

# change to the app user
USER app

CMD gunicorn ecommerce.wsgi:application --bind 0.0.0.0:$PORT

# run entrypoint.prod.sh
ENTRYPOINT ["/home/app/web/entrypoint.prod.sh"]
